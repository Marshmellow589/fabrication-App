fabrication_app/
│
├── app/
│   ├── __init__.py
│   ├── main.py         # FastAPI app initialization
│   ├── database.py     # Database connection setup
│   ├── utils.py        # Shared utilities
│   ├── dependencies.py # Shared dependencies
│   │
│   ├── models/         # Database models (SQLAlchemy)
│   │   ├── __init__.py
│   │   ├── material.py  # Material inspection database model
│   │   ├── fit_up.py    # Fit-up inspection database model  
│   │   ├── final.py     # Final inspection database model
│   │   ├── ndt.py       # NDT inspection database model
│   │   └── user.py      # User authentication model
│   │
│   ├── schemas/        # Pydantic schemas (request/response validation)
│   │   ├── __init__.py
│   │   ├── material.py  # Material API contracts
│   │   ├── fit_up.py    # Fit-up API contracts
│   │   ├── final.py     # Final inspection API contracts
│   │   ├── ndt.py       # NDT API contracts  
│   │   ├── user.py      # User auth API contracts
│   │   └── token.py     # Token handling schemas
│   │
│   └── routers/        # FastAPI route handlers
│       ├── __init__.py
│       ├── material.py  # Material inspection endpoints
│       ├── fit_up.py    # Fit-up inspection endpoints
│       ├── final.py     # Final inspection endpoints
│       ├── ndt.py       # NDT inspection endpoints
│       └── auth.py      # Authentication endpoints
│
├── requirements.txt    # Python dependencies
├── README.md           # Project documentation
└── user_guidance_for_app_requirment.txt

ARCHITECTURE EXPLANATION:

1. MODELS (SQLAlchemy):
- Define database tables and relationships
- Represent the data layer (e.g. MaterialInspection, FitUpInspection)
- Contain business object definitions and database operations

2. SCHEMAS (Pydantic):
- Validate request/response data formats
- Define API contracts between frontend and backend
- Handle data serialization/deserialization
- Provide type hints and documentation

3. ROUTERS (FastAPI):
- Define API endpoints and HTTP methods
- Contain business logic and workflow
- Handle authentication/authorization
- Coordinate between schemas and models

INTERACTION FLOW:
1. Request comes to router endpoint
2. Router validates input using schema
3. Router calls model to perform DB operations  
4. Model returns results to router
5. Router validates output using schema
6. Response returned to client

EXAMPLE FOR MATERIAL INSPECTION:
- models/material.py: Defines MaterialInspection SQLAlchemy model
- schemas/material.py: Defines MaterialCreate/MaterialResponse Pydantic models
- routers/material.py: Implements POST/GET/PUT/DELETE endpoints

This separation provides:
- Clean separation of concerns
- Better maintainability
- Easier testing
- Clear API contracts
- Type safety
